'''
THIS FILE CONTAINS ALL THE FUNCTIONS THAT HELPS DOING THE SECOND TASK OF 
FINAL PROJECT 

Functions: 
    reformatter():              reformat the .json files to be more organized 
                                and readable
    get_transcript():           returns list of all transcript in one video
    single_category_counter():  count words within one and only one topic 
    all_categories_counter():   count & tally words across all categories in 
                                LIWC dictionary

Author: Pham Lan Phuong & Ly Trang Tuyen
Group: 2
Course: Spring'22 CS1 
Course instructor: Phan Thanh Trung 
'''
import json 

def reformatter(readname: str, writename: str) -> str:
    '''Reformatting the .json files with indentation for better data presentation.
    This function does not change any of the substantive content of the file, it 
    just reformat to make it readable to humans. 

    Required arguments: 
        readname:   name of the file you want to read
        writename:  name of the output file 

    Returns:    
        a formatted .json file
    '''
    # open to read ugly file json
    with open(readname, "r") as f: 
        file = json.load(f)
    # take ugly json and format with indentation, then write to a new file 
    with open(writename, "w", encoding='utf-8') as f: 
        json.dump(file, f, ensure_ascii=False, indent=4)

# code done using so it's commented out 
# reformatter("[archived]_takeout\liwc_dictionary_final.json", "liwc_dictionary.json")
# reformatter("[archived]_takeout\[transcript]LateNight_YSPqIq0uVUA.json", "transcript_LateNight.json")
# reformatter("[archived]_takeout\[transcript]WeEat__PtMqiCYJT4.json", "transcript_WeEat.json")

def get_transcript(transcript: dict) -> list: 
    '''Parses the transcript.json file and gets all the transcript of one video. 

    Required argument: 
        transcript: a dictionary containing transcript of the video

    Return:        
        a list containing all the transcript of the video, split word by word
    '''
    unique_lines = []
    # all lines in the machine-extracted transcript is repeated twice (idkw)
    # here, we eliminate the repetition in the script
    for item in transcript["vtt"]: 
        repeated_lines = item["text"].split("\n")
        unique_lines.append(repeated_lines[1])
    # remove [Music] and [Applause] in transcript because they are not a real 
    # line of speech, they are just autogenerated by YouTube
    for i in range(len(unique_lines)): 
        if unique_lines[i] == "[Music]":
            unique_lines[i] = unique_lines[i].replace("[Music]", "")
        elif unique_lines[i] == "[Applause]": 
            unique_lines[i] = unique_lines[i].replace("[Applause]", "")
    # formatting transcript into a list where each word is a separated element
    final_transcript = " ".join(unique_lines) # if word in unique_lines != ""
    final_transcript = final_transcript.split()
    return final_transcript

# STEP 1. create a list of all transcript in one video, separated word by word
with open("transcript_WeEat.json", "r") as f: 
    transcript1 = json.load(f)
    script1 = get_transcript(transcript1) # video We Eat

with open("transcript_LateNight.json", "r") as f: 
    transcript2 = json.load(f)
    script2 = get_transcript(transcript2) # video Late Night
    
# open liwc dictionary for later use
with open("liwc_dictionary.json", "r") as f: 
    liwc = json.load(f)

# STEP 2. iterate transcript & count word category occurence & tally up number 
def single_category_counter(transcript: list, liwc: dict, category: str) -> int: 
    '''Helper function to read a transcript and count the number of words in one 
    single category of the LIWC dictionary. 

    Required argument: 
        transcript: video transcript, as a list separated word-by-word 
        liwc:       the LIWC dictionary
        category:   the category or topic within the LIWC dictionary to search

    Returns: 
        an integer indicating the number of words within the specified category
    '''
    counter = 0
    # iterate through transcript, increase counter when meeting a word that also
    # appear in the specified LIWC category
    for word in transcript: 
        if word.lower() in liwc["dict"][category]: # lowercase just to be safe 
            counter = counter + 1 
    return counter 

def all_categories_counter(transcript: list) -> dict: 
    '''Read the script and get the number of words within all categories of the
    LIWC dictionary. 

    Required arguments: 
        transcript: video transcript, as a list separated word-by-word

    Returns: 
        a dictionary containing the number of words in all categories of the
        LIWC dictionary
    '''
    script_tally = {}
    # plug in different topics to the helper function
    # then add category count to the dictionary
    for category in liwc["topics"]: 
        number = single_category_counter(transcript, liwc, category)
        script_tally[category] = number
    return script_tally

script1_count = all_categories_counter(script1)
script2_count = all_categories_counter(script2)

# writing output to json file for easy access in later stages
with open("[output_t2]script1_count.json", "w", encoding='utf-8') as f: 
    json.dump(script1_count, f, ensure_ascii=False, indent=4)
with open("[output_t2]script2_count.json", "w") as f: 
    json.dump(script2_count, f, ensure_ascii=False, indent=4)